plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.2'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'ru.ukrainskiy.rnd.chatter3'
sourceCompatibility = '17'


configurations {
	jdbc
	lb
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-web-services'

	implementation 'org.springframework.security:spring-security-web'
	implementation 'org.springframework.security:spring-security-config'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.0'
	
	implementation 'org.liquibase:liquibase-core'
	runtimeOnly 'org.postgresql:postgresql'

	annotationProcessor 'org.projectlombok:lombok:1.18.24'
	implementation 'org.projectlombok:lombok:1.18.24'

	implementation 'org.mapstruct:mapstruct:1.5.3.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
	
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	implementation 'org.apache.commons:commons-lang3:3.9'

	jdbc "org.postgresql:postgresql"
	lb "org.liquibase:liquibase-core"
	lb "org.postgresql:postgresql"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'

}

tasks.withType(JavaCompile) {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true'
    ]
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.withType(Jar){
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task dbPrepare {

	group 'liquibase'
	description = 'Prepares database with default schema'

	doLast {
		println "Doing DB preparations"
		def sqlClassLoader = groovy.sql.Sql.classLoader
		configurations.jdbc.each { sqlClassLoader.addURL it.toURI().toURL() }

		def sql = groovy.sql.Sql.newInstance(
				"jdbc:postgresql://$dbHost:$dbPort/$dbName",
				"$dbUser",
				"$dbPass",
				"org.postgresql.Driver"
		)

		sql.execute 'CREATE SCHEMA IF NOT EXISTS chatter;'
		sql.execute 'SET search_path = chatter;'
	}

	doLast {
		println "Creating liquibase.properties at project root for a reason"
		new File(projectDir, "liquibase.properties").text = """changeLogFile=src/main/resources/db/changelog/changelog-master.yaml
            driver=org.postgresql.Driver
            url=jdbc:postgresql://$dbHost:$dbPort/$dbName
            username=$dbUser
            password=$dbPass
            """
	}
}

task dbCreate(type: JavaExec) {

	group 'liquibase'
	description = 'Creates all DDL structure via liquibase migrations'
	systemProperty "useDevData", "false"
	dependsOn dbPrepare

	classpath configurations.lb
	mainClass = "liquibase.integration.commandline.Main"
	args "update"
}
